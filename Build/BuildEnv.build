<?xml version="1.0"?>
<project xmlns="http://nant.sf.net/release/0.92/nant.xsd"
         name="BuildEnv"
         default="None" >

  <include buildfile="Local/ReleaseLabels.build" />

  <property name="buildType"
          overwrite="false"
          value="Dev" />
  <property name="buildType"
            value="${environment::get-variable('BUILD_TYPE')}"
            if="${environment::variable-exists('BUILD_TYPE')}" />

  <property name="buildConfiguration"
            value="Release" />
  <property name="buildConfiguration"
            value="Debug"
            if="${buildType == 'Dev'}"/>

  <property name="isBambooBuild"
            value="false" />
  <property name="isBambooBuild"
            value="true"
            if="${environment::variable-exists('bamboo_working_directory')}" />

  <property name="isLocalBuild"
          value="true" />
  <property name="isLocalBuild"
            value="false"
            if="${environment::variable-exists('JENKINS_HOME')}" />
  <property name="isLocalBuild"
            value="false"
            if="${isBambooBuild == 'true'}" />

  <property name="buildName"
            value="Local Build" />
  <property name="buildName"
            value="${environment::get-variable('JOB_NAME')}"
            if="${environment::variable-exists('JOB_NAME')}" />
  <property name="buildName"
            value="${environment::get-variable('bamboo_planName')}"
            if="${environment::variable-exists('bamboo_planName')}" />

  <property name="buildNumber"
            value="${environment::get-variable('BUILD_NUMBER')}"
            if="${environment::variable-exists('BUILD_NUMBER')}" />
  <property name="buildNumber"
            value="${environment::get-variable('bamboo_buildNumber')}"
            if="${environment::variable-exists('bamboo_buildNumber')}" />

  <property name="fullBranchName"
            value="origin/develop" />
  <property name="fullBranchName"
            value="${environment::get-variable('GIT_BRANCH')}"
            if="${environment::variable-exists('GIT_BRANCH')}" />
  <property name="fullBranchName"
            value="${environment::get-variable('bamboo_planRepository_branch')}"
            if="${environment::variable-exists('bamboo_planRepository_branch')}" />

  <property name="publisherId"
            value="" />

  <property name="publisherId"
            value="${environment::get-variable('PUBLISHER_ID')}"
            if="${environment::variable-exists('PUBLISHER_ID')}" />

  <property name="publisherId"
            value="${environment::get-variable('bamboo_PUBLISHER_ID')}"
            if="${environment::variable-exists('bamboo_PUBLISHER_ID')}" />

  <property name="shortBranchName"
            value="${string::substring(fullBranchName,  string::last-index-of(fullBranchName, '/') + 1, string::get-length(fullBranchName) - (string::last-index-of(fullBranchName, '/') + 1))}" />

  <property name="version"
            value="${release}.${buildNumber}"/>

  <property name="workspace.dir"
            value="${directory::get-parent-directory( project::get-base-directory() ) }" />

  <property name="workspace.dir"
            value="${environment::get-variable('WORKSPACE')}"
            if="${environment::variable-exists('WORKSPACE')}" />
  <property name="workspace.dir"
            value="${environment::get-variable('bamboo_build_working_directory')}"
            if="${environment::variable-exists('bamboo_build_working_directory')}" />

  <property name="gitRemoteNamme"
            value="origin" />
  <if test ="${isBambooBuild == 'true'}" >
    <property name="gitURL"
              value="Git URL Not Set" />
    <property name="gitURL"
              value="${environment::get-variable('bamboo_repository_git_repositoryUrl')}"
              if="${environment::variable-exists('bamboo_repository_git_repositoryUrl')}" />
    <property name="gitRemoteNamme"
              value="gitRemoteBamboo" />
  </if>

  <property name="build.dir"
            value="${workspace.dir}/Build" />

  <property name="build.local.dir"
            value="${build.dir}/Local" />

  <property name="build.out.dir"
            value="${workspace.dir}/BuildOut" />

  <property name="staging.dir"
            value="${build.out.dir}/Staging" />

  <property name="artifacts.dir"
            value="${build.out.dir}/Artifacts" />

  <property name="test.output.dir"
            value="${build.out.dir}/Tests" />

  <property name="solutionFileName"
            value="${workspace.dir}\${productName}.sln"/>

  <property name="packageFileName"
            value="${productName}.${version}.nupkg"
            dynamic="true" />

  <property name="symbolsFileName"
            value="${productName}.${version}.symbols.nupkg"
            dynamic="true" />

  <property name="nunit.tests.project"
            value="${build.local.dir}\TestAssemblies.nunit" />

  <property name="unitTestsResultsFileName"
          value="${test.output.dir}\TestResults.xml" />

  <property name="coverageReportFileName"
            value="${test.output.dir}\CoverageReport.xml" />

  <property name="helpproject.dir"
            value="${workspace.dir}\${productName}.Help" />

  <property name="useNuSpecFile"
            value="false" />

  <property name="NugetServerURL"
            value="http://cdi-dev-nuget.devid.local/CrimsonNuget/api/v2/package" />

  <property name="SymbolServerURL"
            value="http://cdi-dev-app01.devid.local/CrimsonSource/NuGet" />

  <property name="nuget.packages.dir"
            value="${workspace.dir}\packages"/>

  <property name="nuget.dir"
            value="${workspace.dir}\.nuget"/>

  <property name="nuget.exe"
            value="${nuget.dir}/NuGet.exe" />
  <!--
  <property name="nuget.exe"
            value="C:\Users\mglasgow\.dnx\runtimes\dnx-clr-win-x86.1.0.0-beta5-11855\bin\dnu.cmd" />
-->
  
  <property name="msbuild.exe"
            overwrite="false"
            value="C:\Program Files (x86)\MSBuild\14.0\Bin\MSBuild.exe" />

  <property name="packageVersion"
            value="" />
  <xmlpeek file="${nuget.dir}/packages.config"
           xpath="/packages/package[@id = 'NAnt']/@version"
           property="packageVersion" />
  <property name="nant.dir"
            value="packages\NAnt.${packageVersion}" />
  <property name="nant.exe"
            value="${nant.dir}\nant.exe" />

  <property name="assemblyInfoFile"
          overwrite="false"
          value="CommonAssemblyInfo.cs" />

  <property name="fxCopProjectFileName"
            value="${workspace.dir}/${productName}.FxCop" />

  <if test="${useTestDatabase == 'true'}" >
    <xmlpeek file="${nuget.dir}/packages.config"
           xpath="/packages/package[@id = 'SchemaUtil']/@version"
           property="packageVersion" />
    <property name="schemautil.dir"
              value="packages\SchemaUtil.${packageVersion}" />
    <property name="schemautil.exe"
              value="${schemautil.dir}\SchemaUtil.exe" />

    <property name="db.server"
              value="localhost" />

    <property name="db.name"
              value="${shortBranchName}_${buildNumber}" />
    <property name="database.config.file"
              value="TestDatabaseConnection.xml"/>

    <property name="db.connection.string"
              value="Data Source=${db.server};database=${db.name};integrated security=True;MultipleActiveResultSets=true;" />

    <!--path to sql scripts, scripts folders, loader xml, etc.-->
    <property name="create_db.sql"
              overwrite="false"
              value="${build.dir}/SQL/create_db.sql" />
    <property name="delete_db.sql"
              overwrite="false"
              value="${build.dir}/SQL/delete_db.sql" />
    <property name="app.schema"
              overwrite="false"
              value="${workspace.dir}/schema" />

  </if>

  <include buildfile="Local/BuildEnvLocal.build" />

  <target name="None" />

<!-- GenerateProperties creates a Java style properties file with contents
     of some of the environment variables.  This is used by the email template
     not all environment variables are available to that plugin for some reason.
     Also, some of the values are calculated based on the environment.
     Any environment information that will be included has
     to be exported then it is pulled into the environment as par-->

  <property name="propertyFileName"
            value="${staging.dir}/build.properties" />

  <target name="GenerateBuildProperties"> 
      <echo message="Generating property file ${propertyFileName}" />

      <mkdir dir="${staging.dir}" />

    <echo file="${propertyFileName}"
          append="false" >
      PRODUCT_NAME = ${productName}
      RELEASE = ${release}
      VERSION = ${version}
      RELEASE_BUILD_NUMBER=${buildNumber}
      BUILD_TYPE = ${buildType}
      BRANCH_NAME = ${fullBranchName}
      SHORT_BRANCH_NAME = ${shortBranchName}
    </echo>

  </target>

</project>
